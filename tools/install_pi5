#!/bin/bash

# This script will install the OVBOX software, either from the apt
# repository hosted by Hoerzentrum Oldenburg (apt.hoertech.de) or
# compile and install from source. It expects to be running on a
# Raspberry Pi, with the user "pi" in the home folder "/home/pi". It
# will create an additional user "ov" to run the actual OVBOX process.
#
# Important: Do not run this script on a system that is not intended
# to be used solely as an OVBOX.

BRANCH=master
if ! test -z "$1"; then
    BRANCH="$1"
fi
echo $BRANCH

BOOTFS=`mount | grep /boot | sed -e 's/.*\/boot/\/boot/1' -e 's/ .*//1'`

(
    # minimal error handling:
    trap "echo An error occured.;sleep 20;exit 1" ERR

    # start in home directory:
    cd

    echo "Installing OVBOX $BRANCH"
    echo ""

    echo "BOOTS = ${BOOTFS}"
    echo ""

    df -BM

    export DEBIAN_FRONTEND=noninteractive

    # update main system
    # in case someone powered off during installation we need to fix unconfigured packages:
    sudo dpkg --configure -a
    sync

    echo "update apt database:"
    # install dependencies:
    # retry 10 times because the raspios servers are not very stable:
    cnt=10
    while test $cnt -gt 0; do
        echo counter: $cnt
	sudo -E apt update --assume-yes && cnt=-1 || sleep 7; let cnt=$cnt-1
	sync
    done

    echo "upgrade system:"
    # install dependencies:
    # retry 10 times because the raspios servers are not very stable:
    cnt=10
    while test $cnt -gt 0; do
        echo counter: $cnt
	sudo -E apt upgrade --assume-yes && cnt=-1 || sleep 7; let cnt=$cnt-1
	sync
    done

    echo "Install CA certificates:"
    cnt=10
    while test $cnt -gt 0; do
        echo counter: $cnt
        sudo -E apt-get install --no-install-recommends --assume-yes ca-certificates && cnt=-1  || sleep 7; let cnt=$cnt-1
        sync
    done

    echo "install git, build-essential and other basic stuff:"
    cnt=10
    while test $cnt -gt 0; do
        echo counter: $cnt
        sudo -E apt-get install --no-install-recommends --assume-yes git build-essential cmake xxd gettext-base lsb-release && cnt=-1   || sleep 7; let cnt=$cnt-1
        sync
    done

    echo "install dependencies of cli tool:"
    cnt=10
    while test $cnt -gt 0; do
        echo counter: $cnt
        sudo -E apt-get install --no-install-recommends --assume-yes liblo-dev libcurl4-openssl-dev libasound2-dev libeigen3-dev libfftw3-dev libfftw3-single3 libgsl-dev libjack-jackd2-dev libltc-dev libmatio-dev libsndfile1-dev libsamplerate0-dev nlohmann-json3-dev libxerces-c-dev libcunit1-dev libsodium-dev && cnt=-1 || sleep 7; let cnt=$cnt-1
        sync
    done

    OSREL=`lsb_release -a|grep Codename|sed 's/Codename:[[:blank:]]*//1'`

    echo "OS is ${OSREL}"

    # install from git in any of these cases:
    # - user request
    # - bookworm (no apt available)
    # - first install (ovbox_version not yet available)
    if test -e ${BOOTFS}/ovclient-firmwareupdate-git || test "bookworm" = "${OSREL}" || ( ! ovbox_version ); then
	# install from git repo:
        echo "installing from git reposiroy"

	if test ! -e "/usr/include/lsl_c.h"; then
	    echo "install liblsl:"
	    (
		git clone -b v1.16.2 https://github.com/sccn/liblsl.git || true
		cd liblsl
		./standalone_compilation_linux.sh
		sudo cp liblsl.so /usr/lib/
		sudo cp -r include/* /usr/include/
	    ) || true
	fi

	echo "clone or update git repo:"
	(cd ov-client && git clean -ffx && git pull) || git clone https://github.com/gisogrimm/ov-client

	echo "checkout selected branch:"
	(cd ov-client && git clean -ffx && git checkout $BRANCH && git pull)

	echo "update submodules:"
	make -C ov-client gitupdate

	echo "clean repo:"
	make -C ov-client clean

	echo "build tools:"
	make -j $(nproc) -C ov-client cli

	echo "package tools:"
	make -C ov-client/packaging/deb clipack

	echo "install new debian packages:"
	sudo -E apt-get install --assume-yes --no-install-recommends ./ov-client/packaging/deb/debian/*/ovbox-cli_*.deb

        echo "install autorun script:"
        sudo cp ov-client/tools/pi/autorun_pi5 /home/pi/autorun
        sudo chmod a+x /home/pi/autorun
        sudo chown pi:pi /home/pi/autorun

    else
        echo "installing from apt reposiroy"
	# install debian packages from apt repo:
	# retry 10 times because the raspios servers are not very stable:
	cnt=10
	while test $cnt -gt 0; do
	    sudo -E apt update && cnt=-1 || ( sleep 20; let cnt=$cnt-1 )
	    sync
	done
	if test $cnt -eq 0; then
            echo "failed 10 times, switching to GWDG mirror"
            sudo sed -i -e '/raspbian/ d' -e '/^[[:blank:]]*$/ d' /etc/apt/sources.list|| echo "unable to remove previous apt entries"
            (echo "";echo "deb http://ftp.gwdg.de/pub/linux/debian/raspbian/raspbian/ ${OSREL} main contrib non-free rpi")|sudo tee -a /etc/apt/sources.list
            sync
            cnt=10
            while test $cnt -gt 0; do
		sudo -E apt update && cnt=0 || ( sleep 20; let cnt=$cnt-1 )
		sync
            done
	fi
	cnt=10
	while test $cnt -gt 0; do
	    sudo -E apt upgrade --assume-yes && cnt=0 || ( sleep 20; let cnt=$cnt-1 )
	    sync
	done

	# identify OS release code name:
	OSREL=`lsb_release -a|grep Codename|sed 's/Codename:[[:blank:]]*//1'`
	OSRELHTCH="$OSREL"
	if test "$OSREL" = "buster"; then
            OSRELHTCH=bionic
	fi
	# identify OS architecture:
	OSARCH=`dpkg-architecture | grep -e 'DEB_BUILD_ARCH='|sed 's/[^=]*=//1'`


	# add/update HoerTech apt repository (containing ovbox-cli):
        echo "add/update HoerTech apt repository (containing ovbox-cli)"
	sudo sed -i -e '/apt.hoertech.de/ d' -e '/^[[:blank:]]*$/ d' /etc/apt/sources.list|| echo "unable to remove previous apt entries"
        echo "Installing latest key"
	wget -qO- http://apt.hoertech.de/openmha-packaging.pub | sudo apt-key add -
	(echo "";echo "deb [arch=${OSARCH}] http://apt.hoertech.de ${OSRELHTCH} universe")|sudo tee -a /etc/apt/sources.list
        if test "$BRANCH" = "development"; then
	    (echo "";echo "deb [arch=${OSARCH}] http://aptdev.hoertech.de ${OSRELHTCH} universe")|sudo tee -a /etc/apt/sources.list
        fi
	sync

	# in case someone powered off during installation we need to fix unconfigured packages:
	sudo dpkg --configure -a
	sync
	# install dependencies:
	# retry 10 times because the raspios servers are not very stable:
	cnt=10
	while test $cnt -gt 0; do
	    sudo -E apt update && cnt=0 || ( sleep 20; let cnt=$cnt-1 )
	    sync
	done
	cnt=10
	while test $cnt -gt 0; do
	    sudo -E apt upgrade --assume-yes && cnt=0 || ( sleep 20; let cnt=$cnt-1 )
	    sync
	done
	cnt=10
	while test $cnt -gt 0; do
	    sudo -E apt install --no-install-recommends --assume-yes ovbox-cli libnss-mdns && cnt=0 || ( sleep 20; let cnt=$cnt-1 )
	    sync
	done

        echo "install autorun script:"
        sudo cp /usr/share/ovclient/tools/autorun_pi5 /home/pi/autorun
        sudo chmod a+x /home/pi/autorun
        sudo chown pi:pi /home/pi/autorun

    fi
    echo "install rtirq-init:"
    sudo -E apt-get install --assume-yes --no-install-recommends rtirq-init

    echo "update real-time priority priviledges:"
    sudo sed -i -e '/.audio.*rtprio/ d' -e '/.audio.*memlock/ d' /etc/security/limits.conf
    echo "@audio - rtprio 99"|sudo tee -a /etc/security/limits.conf
    echo "@audio - memlock unlimited"|sudo tee -a /etc/security/limits.conf

    echo "install user to run the scripts - do not provide root priviledges:"
    sudo useradd -m -G audio,dialout ov || echo "user ov already exists."

    echo "register autorun script in /etc/rc.local:"
    sudo sed -i -e '/exit 0/ d' -e '/.*autorun.*autorun/ d' -e '/.*home.pi.install.*home.pi.install/ d' -i /etc/rc.local
    echo "test -x /home/pi/autorun && su -l pi /home/pi/autorun &"|sudo tee -a /etc/rc.local
    echo "exit 0"|sudo tee -a /etc/rc.local
    sudo chmod a+x /etc/rc.local

    echo "setup host name:"
    HOSTN=$(ov-client_hostname)
    echo "ovbox${HOSTN}" | sudo tee /etc/hostname
    sudo sed -i "s/127\.0\.1\.1.*/127.0.1.1\tovbox${HOSTN}/g" /etc/hosts
    sync

    echo "configure country code and prepare WiFi config:"
    sudo touch ${BOOTFS}/ovclient-wifi.txt
    sync

    echo "install and activate NTP:"
    sudo -E apt install --assume-yes ntp ntpdate
    #sudo systemctl stop systemd-timesyncd
    NTPCONF=$(find /etc -name ntp.conf  2>/dev/null) || true
    sudo sed -i -e 's/^pool.*/#&/1' -e '/ptbtime/ d' $NTPCONF
    sudo sed -i -e "/^driftfile/ c driftfile ${BOOTFS}\/ntp.drift" $NTPCONF
    (
        echo ""
        for k in {1..4}; do
            echo "pool ptbtime${k}.ptb.de"
        done
    ) | sudo tee -a $NTPCONF
    sudo sed -i -e "/^IGNORE_DHCP/ c IGNORE_DHCP=\"yes\"" /etc/default/ntp*
    sudo systemctl restart ntp

    echo "cleaning up apt:"
    sudo -E apt update --assume-yes || true
    sudo -E apt autoremove --assume-yes || true

    #echo "wait 10 s, then activate overlay image to avoid damage of the SD card upon power off:"
    #sleep 10
    #sudo raspi-config nonint enable_overlayfs
    #sync
    #
    #echo "ready, reboot:"
    #sudo shutdown -r now

    sync
    echo "Successfully installed OVBOX system!"
) 2>&1 | (ovbox_sendlog || cat)
